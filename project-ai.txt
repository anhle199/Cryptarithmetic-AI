https://github.com/mohilpatel25/cryptarithmetic-puzzle-solver/blob/main/CryptArithmetic.py

csp:
	- variables: alphabet
	- domains: 0-9
	- constraints:
		- alldiff


variables = [F, T, U, W, R, O]
variables_bool = [false, false, false, false, false, false]

domains = [
	'F': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
	'T': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
	'U': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
	'W': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
	'R': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
	'O': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
]

assignment = [
	'variable': value
]


def read_file(filename)
def write_file(filename)

def alldiff
def same_operand
def sum_last_col_>=10


def solve(csp):
	sum_last_col_>=10(csp)
	same_operand(csp)

	assignment = {}
	hasSolution = backtrack(assignment, csp)
	if hasSolution:
		return assignment

def backtrack(data, assignment, csp):
	if assignment is full and sum_cryptarithmetic(data, assignment)
		return assignment

	var = degree_heuristic(csp)
	csp.variables[var].status = true
	domains = copy.deepcopy(csp.domains[var])
	for val in domains:
		if val not in assignment
			assignment.append({var: val})
			inferences = inference(csp, var, val)

			if inferences == true:
				clone_next_char = copy.deepcopy(csp.domains[next_char])
				result = backtrack(data, assignment, csp)
				csp.domains[next_char] = copy.deepcopy(clone_next_char)

				if result == true: // có kết quả
					return result

			csp.append(csp_removed)
			assignment.pop({var: val})
			csp.remove({var: val})

	csp.variables[var].status = false
	return false

main() {
	data = read_file(filename)
	csp = create_csp(data) // đọc từ phải qua trái, trên xuống dưới
	assignment = solve(data, csp)
	write_file(filename, assignment)

	if assignment is empty
		print("NO SOLUTION)
	else
		print(assignment)
}

