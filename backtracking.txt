def backtracking(assignment, csp, col, i):
    var = csp.constraints[col].operands[i]
    is_calc = (i == len(csp.constraints[col].operands))

    if var != '0' and var not in assignment.keys():
        csp.visited[var] = true
        domains = deepcopy(csp.doamins[var])

        for val in domains:
            if val not in assignment:
                assignment[var] = val
                {domains_removed, status} = inference(assignment, csp, var, val, is_calc)

                if status:
                    result = true
                    if is_calc:
                        result = sum_cryptarithmetic(assignment, csp, col, domains_removed)
                    if col == len(csp.constraints) - 1 and is_calc and result:
                        return result

                    if result:
                        col += is_calc ? 1 : 0
                        i = is_calc ? 0 : (i + 1)
                        clone_domains_next_char = deepcopy(csp.domains[csp.constraints[col].operands[i]])
                        result = backtracking(assignment, csp, col, i)
                        csp.domains[csp.constraints[col].operands[i]] = clone_domains_next_char

                        if result:
                            return result

                csp.domains.append(domains_removed)
                del assignment[var]
                csp.domains[var].remove(val)

        csp.visited[var] = false
        return false
    else:
        domians_removed = {}
        result = true
        if is_calc:
            result = sum_cryptarithmetic(assignment, csp, col, domains_removed)
        if not (col == len(csp.constraints) - 1 and is_calc) and result:
            col += is_calc ? 1 : 0
            i = is_calc ? 0 : (i + 1)
            clone_domains_next_char = deepcopy(csp.domains[csp.constraints[col].operands[i]])
            result = backtracking(assignment, csp, col, i)
            csp.domains[csp.constraints[col].operands[i]] = clone_domains_next_char
        if not result:
            csp.domains.append(domains_removed)

        return result
